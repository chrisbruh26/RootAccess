import random
class NPCBehaviorCoordinator:
    """Manages NPC behaviors and enforces limits on actions per turn."""
    def __init__(self, max_npc_actions_per_turn=5, max_actions_per_npc=1):
        self.max_npc_actions_per_turn = max_npc_actions_per_turn
        self.max_actions_per_npc = max_actions_per_npc
        self.npc_cooldowns = {}  # Tracks cooldowns for specific NPC behaviors

    def process_npc_behaviors(self, game, npcs):
        """
        Process NPC behaviors for the current turn, enforcing limits.

        Args:
            game: The main game instance.
            npcs: List of NPCs in the current area.

        Returns:
            A list of messages generated by NPC actions.
        """
        messages = []
        actions_taken = 0

        # Reset actions for all NPCs at the start of the turn
        for npc in npcs:
            npc.actions_this_turn = 0

        # Shuffle NPCs to randomize action order
        random.shuffle(npcs)

        for npc in npcs:
            if actions_taken >= self.max_npc_actions_per_turn:
                break  # Stop if we've reached the max actions for this turn

            # Skip NPCs that are on cooldown or have already acted
            if self._is_on_cooldown(npc) or npc.actions_this_turn >= self.max_actions_per_npc:
                continue

            # Let the NPC take an action
            result = npc.update_behavior(game)
            if result:
                messages.append(result)
                actions_taken += 1
                npc.actions_this_turn += 1

                # Apply cooldown to the NPC
                self._apply_cooldown(npc)

        # Reset actions for all NPCs at the end of the turn
        for npc in npcs:
            npc.actions_this_turn = 0

        return messages

    def _is_on_cooldown(self, npc):
        """Check if an NPC is on cooldown for their behavior."""
        return self.npc_cooldowns.get(npc, 0) > 0

    def _apply_cooldown(self, npc, cooldown=1):
        """Apply a cooldown to an NPC."""
        self.npc_cooldowns[npc] = cooldown

    def decrement_cooldowns(self):
        """Decrement cooldowns for all NPCs."""
        for npc in list(self.npc_cooldowns.keys()):
            self.npc_cooldowns[npc] -= 1
            if self.npc_cooldowns[npc] <= 0:
                del self.npc_cooldowns[npc]
