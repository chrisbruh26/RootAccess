# changes I want to make: 
# Tech class (base class)
# Smartphone class - holds apps, files for player, maybe other stuff
#

class Item:
    def __init__(self, name, description, value=0):
        self.name = name
        self.description = description
        self.value = value

    def __str__(self):
        return self.name


class Weapon(Item):
    def __init__(self, name, description, value, damage):
        super().__init__(name, description, value)
        self.damage = damage

    def __str__(self):
        return f"{self.name} (Damage: {self.damage})"


class Consumable(Item):
    def __init__(self, name, description, value, health_restore):
        super().__init__(name, description, value)
        self.health_restore = health_restore

    def __str__(self):
        return f"{self.name} (Restores: {self.health_restore} health)"
    

class Seed(Item):
    def __init__(self, name, description, crop_type, value, growth_time=3):
        super().__init__(name, description, value)
        self.crop_type = crop_type
        self.growth_time = growth_time  # Number of turns until fully grown
    
    def __str__(self):
        return f"{self.name} ({self.crop_type})"

class Plant(Item):
    def __init__(self, name, description, crop_type, value, growth_stage=0, max_growth=3):
        super().__init__(name, description, value)
        self.crop_type = crop_type
        self.growth_stage = growth_stage
        self.max_growth = max_growth
        
    def grow(self):
        if self.growth_stage < self.max_growth:
            self.growth_stage += 1
            return True
        return False
    
    def water(self):
        """Water the plant to accelerate growth."""
        if self.growth_stage >= self.max_growth:
            return False, f"The {self.name} is already fully grown and ready to harvest."
        
        # Water the plant, which advances growth by a full stage
        # This makes plants grow much faster without needing a day/night cycle
        self.growth_stage += 1
        
        if self.is_harvestable():
            return True, f"You water the {self.name}. It's now fully grown and ready to harvest!"
        else:
            return True, f"You water the {self.name}. It grows visibly before your eyes!"
    
    def is_harvestable(self):
        return self.growth_stage >= self.max_growth
    
    def __str__(self):
        stage_desc = "seedling" if self.growth_stage == 0 else \
                    "growing" if self.growth_stage < self.max_growth else \
                    "ready to harvest"
        return f"{self.name} ({stage_desc})"
    


# set up classes that help with plant special effects (type of water, maybe watering can should have its own class to track which type of water is being used)


#Can you help me set up more classes? Here are my comments I left in more_garden_stuff.py about what I want:

# I want plants to have special effects and I need to set it up in a scalable way

# I want the effects to be determined while the plant is growing

# hacks can be applied to plants through the garden management app, or by using a special type of water like "hacked milk", or by inserting a USB stick into the soil

# I want to be able to add new effects easily

# hacked milk will give the plant a supervision effect, which causes supervision in player when eaten

# supervision on the player means they can see items that weren't there before (new items spawn)

# maybe add special effect attribute to plant for easy tracking (None by default)

# set up a way to define the type of water in a watering can, and a checker so that plants can track which type of water is being used on them, and which effects to have when harvested

# create hacked milk as a substance that can be used to water plants, and set up supervision effect on player when they eat the plant

# when supervision effect takes place, spawn new items in the area

            # --------------------------- #
            #    Tech class and apps      #
            # --------------------------- #

class Tech:
    """Base class for all technology items in the game."""
    def __init__(self, name, description):
        self.name = name
        self.description = description
        
    def use(self):
        """Default use method for tech items."""
        return f"You use the {self.name}."


class App:
    """Base class for smartphone applications."""
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.options = {}
        
    def run(self):
        """Run the app and return its menu."""
        return f"{self.name} - {self.description}\nOptions: {', '.join(self.options.keys())}"
        
    def execute_option(self, option, game, player):
        """Execute a specific option within the app."""
        if option in self.options:
            return self.options[option](game, player)
        return f"Invalid option: {option}"


class GardenApp(App):
    """Garden management application for smartphones."""
    def __init__(self):
        super().__init__("Garden Manager", "Manage and enhance your garden")
        self.options = {
            "status": self.garden_status,
            "instagrow": self.instagrow,
            "help": self.help
        }
        
    def garden_status(self, game, player):
        """Show status of all plants in the current area."""
        area = player.current_area
        plants_found = False
        status = "Garden Status:\n"
        
        for obj in area.objects:
            if isinstance(obj, Soil) and obj.plants:
                plants_found = True
                status += f"\n{obj.name}:\n"
                for plant in obj.plants:
                    growth_percent = (plant.growth_stage / plant.max_growth) * 100
                    status += f"  - {plant.name}: {growth_percent:.0f}% grown"
                    if plant.is_harvestable():
                        status += " (Ready to harvest!)"
                    status += "\n"
        
        if not plants_found:
            return "No plants found in this area."
        return status
        
    def instagrow(self, game, player):
        """Instantly grow all plants in the current area to maximum growth."""
        area = player.current_area
        plants_grown = 0
        
        for obj in area.objects:
            if isinstance(obj, Soil):
                for plant in obj.plants:
                    if not plant.is_harvestable():
                        plant.growth_stage = plant.max_growth
                        plants_grown += 1
        
        if plants_grown > 0:
            return f"HACK SUCCESSFUL: {plants_grown} plants have instantly grown to full maturity!"
        else:
            return "No plants found that needed growing."
            
    def help(self, game, player):
        """Show help for the garden app."""
        help_text = "Garden Manager App Help:\n"
        help_text += "  - status: View the status of all plants in your current area\n"
        help_text += "  - instagrow: Instantly grow all plants to full maturity\n"
        help_text += "  - help: Show this help message"
        return help_text


class Smartphone(Tech, Item):
    """A smartphone that can run various apps."""
    def __init__(self, name="Smartphone", description="A high-tech smartphone with various apps", value=50):
        Tech.__init__(self, name, description)
        Item.__init__(self, name, description, value)
        self.apps = {}
        self.current_app = None
        
        # Install default apps
        self.install_app(GardenApp())
        
    def install_app(self, app):
        """Install a new app on the smartphone."""
        self.apps[app.name.lower()] = app
        
    def use(self):
        """Use the smartphone, showing the main menu."""
        if not self.apps:
            return "Your smartphone has no apps installed."
        
        menu = "Smartphone Menu\nAvailable apps:\n"
        for app_key, app in self.apps.items():
            menu += f"  - {app.name}: {app.description}\n"
        menu += "\nUse 'use phone [app_name]' to open an app. For example: 'use phone garden'"
        return menu
        
    def open_app(self, app_name):
        """Open a specific app on the smartphone."""
        app_key = app_name.lower()
        
        # Exact match
        if app_key in self.apps:
            self.current_app = self.apps[app_key]
            return self.current_app.run()
        
        # Partial match (e.g., "garden" matches "garden manager")
        for key, app in self.apps.items():
            if app_key in key:
                self.current_app = app
                return self.current_app.run()
        
        return f"App not found: {app_name}"
        
    def execute_app_option(self, option, game, player):
        """Execute an option in the currently open app."""
        if not self.current_app:
            return "No app is currently open."
        return self.current_app.execute_option(option, game, player)
        
    def __str__(self):
        return f"{self.name}"


            # --------------------------- #
            # Object class and subclasses #
            # --------------------------- #

class Object(): # this was initially a subclass of item, not sure if I want to keep it that way
        def __init__(self, name, description, portable=True, value=0):
            self.name = name
            self.description = description
            self.portable = portable
            self.value = value
            
        def __str__(self):
            return self.name
            
class Storage(Object):
    def __init__(self, name, description, capacity=10, portable=True, value=0):
        super().__init__(name, description, portable, value)
        self.items = []
        self.capacity = capacity  # Maximum number of items this storage can hold
        self.is_open = False  # Storage starts closed
        
    def open(self):
        # Open the storage to access items.
        if self.is_open:
            return False, f"The {self.name} is already open."
        self.is_open = True
        return True, f"You open the {self.name}."
        
    def close(self):
        # Close the storage.
        if not self.is_open:
            return False, f"The {self.name} is already closed."
        self.is_open = False
        return True, f"You close the {self.name}."
        
    def add_item(self, item):
        # Add an item to the storage.
        if len(self.items) >= self.capacity:
            return False, f"The {self.name} is full and cannot hold any more items."
        
        self.items.append(item)
        return True, f"You put {item.name} in the {self.name}."
        
    def remove_item(self, item_name):
        # Remove an item from the storage by name.
        for item in self.items:
            if item.name.lower() == item_name.lower():
                self.items.remove(item)
                return True, item
        return False, None
        
    def list_items(self):
        # List all items in the storage.
        if not self.items:
            return f"The {self.name} is empty."
        
        items_list = [f" - {item}" for item in self.items]
        return f"Items in the {self.name}:\n" + "\n".join(items_list)
        
    def __str__(self):
        status = "open" if self.is_open else "closed"
        return f"{self.name} ({status})"


class Soil(Object):
    def __init__(self, name, description, capacity=5):
        super().__init__(name, description, portable=False)
        self.plants = []
        self.capacity = capacity  # Maximum number of plants this soil can hold
    
    def add_plant(self, seed):
        """Convert a seed into a plant and add it to the soil."""
        if len(self.plants) >= self.capacity:
            return False, "This soil is already at full capacity."
        
        # Create a new plant from the seed
        plant_name = f"{seed.crop_type.capitalize()} Plant"
        plant_desc = f"A young {seed.crop_type} plant growing in the soil."
        new_plant = Plant(plant_name, plant_desc, seed.crop_type, seed.value * 2, 0, seed.growth_time)
        
        self.plants.append(new_plant)
        return True, f"You planted a {seed.crop_type} seed. Water it to help it grow!"
    
    def water_plants(self, plant_name=None):
        """Water all plants or a specific plant in the soil."""
        if not self.plants:
            return False, "There are no plants in this soil to water."
        
        
        if plant_name:
            # Water a specific plant
            plant = self.get_plant(plant_name)
            if not plant:
                return False, f"There is no plant called '{plant_name}' in this soil."
            
            success, message = plant.water()
            return success, message
        else:
            # Water all plants
            results = []
            for plant in self.plants:
                success, message = plant.water()
                if success:
                    results.append(message)
            
            if results:
                return True, "\n".join(results)
            else:
                return False, "All plants are already fully grown."
    
    def get_plant(self, plant_name):
        """Find a plant by name."""
        for plant in self.plants:
            if plant.name.lower() == plant_name.lower():
                return plant
        return None
    
    def remove_plant(self, plant):
        """Remove a plant from the soil."""
        if plant in self.plants:
            self.plants.remove(plant)
            return True
        return False
    
    def __str__(self):
        base_str = f"{self.name}"
        if self.plants:
            base_str += f" with {len(self.plants)} plants growing"

            return base_str
        
class NPC:
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.relationship = 0
        self.items = []


    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item_name):
        item = next((i for i in self.items if i.name.lower() == item_name.lower()), None)
        if item:
            self.items.remove(item)


class Area:
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.items = []
        self.npcs = []
        self.objects = []
        self.exits = {}  # Dictionary to hold exits: direction -> Area

    def add_exit(self, direction, area):
        """Add an exit to another area in a given direction."""
        self.exits[direction] = area

    def get_exit(self, direction):
        """Get the area in the given direction."""
        return self.exits.get(direction, None)

    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        if item in self.items:
            self.items.remove(item)

    def add_object(self, object):
        self.objects.append(object)

    def remove_object(self, obj):
        if obj in self.objects: # using the word item in place of object because the word "object" is a keyword
            self.objects.remove(obj)
            return True
        return False
    

    def add_npc(self, npc):
        self.npcs.append(npc)

    def remove_npc(self, npc):
        if npc in self.npcs:
            self.npcs.remove(npc)

    def describe(self):
        desc = f"{self.name}\n{self.description}\n"
        if self.items:
            desc += "You see the following items:\n"
            for item in self.items:
                desc += f" - {item}\n"
        if self.npcs:
            desc += "You see the following people:\n"
            for npc in self.npcs:
                desc += f" - {npc}\n"
        if self.objects:
            desc += "There are some objects here:\n"
            for obj in self.objects:
                desc += f" - {obj.name}\n"
                # If it's soil, show the plants
                if isinstance(obj, Soil) and obj.plants:
                    desc += "   Plants in this soil:\n"
                    for plant in obj.plants:
                        desc += f"   * {plant}\n"
                # If it's an open storage, show the items inside
                elif isinstance(obj, Storage) and obj.is_open and obj.items:
                    desc += "   Items in this storage:\n"
                    for item in obj.items:
                        desc += f"   * {item}\n"
        return desc


class Player:
    def __init__(self, starting_area, starting_items=None):
        self.current_area = starting_area
        self.inventory = starting_items or []
        self.health = 100

    def move(self, direction):
        """Move the player to the area in the given direction if possible."""
        next_area = self.current_area.get_exit(direction)
        if next_area:
            self.current_area = next_area
            return f"You move {direction} to {self.current_area.name}."
        else:
            return "You can't go that way."

    def teleport(self, area):
        """Teleport the player to any area."""
        self.current_area = area
        return f"You teleport to {self.current_area.name}."

    def pick_up(self, item):
        if item in self.current_area.items:
            self.inventory.append(item)
            self.current_area.remove_item(item)
            return f"You picked up {item}."
        else:
            return "That item is not here."

    def drop(self, item):
        if item in self.inventory:
            self.inventory.remove(item)
            self.current_area.add_item(item)
            return f"You dropped {item}."
        else:
            return "You don't have that item."


class Game:
    def __init__(self):
        self.areas = {}
        self.items = {}  # Centralized item registry
        self.objects = {}  # Centralized object registry
        self.npcs = {}  # Centralized NPC registry


        self.player_starting_items = []  # Initialize this before create_items
        
        self.create_items()
        self.create_areas()
        self.create_objects()
        self.create_npcs()

        self.player = Player(self.areas.get('Home'), self.player_starting_items)
        self.commands = {
            'move': {'handler': self.cmd_move, 'category': 'movement'},
            'go': {'handler': self.cmd_move, 'category': 'movement'},
            'teleport': {'handler': self.cmd_teleport, 'category': 'movement'},
            'tp': {'handler': self.cmd_teleport, 'category': 'movement'},
            'look': {'handler': self.cmd_look, 'category': 'system'},
            'inventory': {'handler': self.cmd_inventory, 'category': 'system'},
            'inv': {'handler': self.cmd_inventory, 'category': 'system'},
            'pickup': {'handler': self.cmd_pick_up, 'category': 'interaction'},
            'take': {'handler': self.cmd_pick_up, 'category': 'interaction'},
            'drop': {'handler': self.cmd_drop, 'category': 'interaction'},
            'quit': {'handler': self.cmd_quit, 'category': 'system'},
            'exit': {'handler': self.cmd_exit, 'category': 'system'},
            'help': {'handler': self.cmd_help, 'category': 'system'},
            'plant': {'handler': self.cmd_plant, 'category': 'interaction'},
            'harvest': {'handler': self.cmd_harvest, 'category': 'interaction'},
            'water': {'handler': self.cmd_water, 'category': 'interaction'},
            # New storage-related commands
            'open': {'handler': self.cmd_open, 'category': 'interaction'},
            'close': {'handler': self.cmd_close, 'category': 'interaction'},
            'put': {'handler': self.cmd_put_in, 'category': 'interaction'},
            'look in': {'handler': self.cmd_look_in, 'category': 'interaction'},
            # Smartphone commands
            'use': {'handler': self.cmd_use, 'category': 'tech'},
            'app': {'handler': self.cmd_app, 'category': 'tech'}
        }
        self.is_running = True

    def add_item_to_area(self, area_name, item_name):
        """Add an item to a specified area."""
        area = self.areas.get(area_name)
        item = self.items.get(item_name)
        if area and item:
            area.add_item(item)
            return f"Added {item.name} to {area.name}."
        return "Area or item not found."
    

    def add_object_to_area(self, area_name, object_name):
        """Add an object to a specified area."""
        area = self.areas.get(area_name)
        object = self.objects.get(object_name)
        if area and object:
            area.add_object(object)
            return f"Added {object.name} to {area.name}."
        return "Area or item not found."
    

    def add_npc_to_area(self, area_name, npc_name):
        """Add an NPC to a specified area."""
        area = self.areas.get(area_name)
        npc = self.npcs.get(npc_name)
        if area and npc:
            area.add_npc(npc)
            return f"Added {npc.name} to {area.name}."
        return "Area or NPC not found."


    def create_items(self):
        """Dynamically create and register items."""

        # regular items
        shovel = Item("Shovel", "A shovel for digging.", 5)

        
        # weapons
        knife = Weapon("Knife","A sharp blade.", 10, 20)
        
        usb_stick = Item("USB stick", "A USB stick with data on it.", 10)
        farm_note = Item("Note", "An old, crumbled up piece of paper with some scribbled writing on it: Take the backroads. You'll find what you're looking for up north.", 10)

        glitter_bomb = Item("Glitter Bomb", "A small, shiny bomb that explodes into glitter.", 50)



        # Register items in the centralized item registry
        self.items["Shovel"] = shovel
        self.items["Knife"] = knife
        self.items["USB stick"] = usb_stick  # item.name is also a valid key
        self.items["Note"] = farm_note  # need to organize this better for multiple notes


        self.items["Glitter Bomb"] = glitter_bomb


        carrot_seed = Seed("Carrot Seed", "A seed for planting carrots.", "carrot", 5)
        tomato_seed = Seed("Tomato Seed", "A seed for planting tomatoes.", "tomato", 5)
        grape_seed = Seed("Grape Seed", "A seed for planting grapes.", "grape", 5)



        self.items["Carrot Seed"] = carrot_seed
        self.items["Tomato Seed"] = tomato_seed
        self.items["Grape Seed"] = grape_seed
        
        # Create smartphone
        smartphone = Smartphone("Smartphone", "A high-tech smartphone with various apps", 100)
        self.items["Smartphone"] = smartphone
        
        # Add smartphone to player's starting inventory
        self.player_starting_items = [smartphone]  # We'll use this in the Player initialization


    def create_objects(self):
        # Dynamically create and register objects.

        garden = Soil("Garden", "A garden full of plants.")
        
        # Create a storage object for the player's home
        toolbox = Storage("Toolbox", "A sturdy metal toolbox for storing garden tools.", capacity=5)
        
        # Create a watering can for gardening
        watering_can = Item("Watering Can", "A metal watering can for watering plants.", 5)
        self.items["Watering Can"] = watering_can
        
        # Register objects in the centralized object registry
        self.objects["Garden"] = garden
        self.objects["Toolbox"] = toolbox
        
        # Add objects to areas
        self.add_object_to_area('Home', 'Garden')
        self.add_object_to_area('Home', 'Toolbox')
        
        # Add the watering can to the toolbox
        toolbox.add_item(watering_can)


    def create_npcs(self):
        """Dynamically create and register NPCs."""
        # NPCs
        Jack = NPC("Jack", "The owner of Jacks Fuel, who may offer valuable intel.")



    def create_areas(self):
        """Create and connect areas in a scalable way."""
        Home = Area("Home", "You are at home.")
        Downtown = Area("Downtown", "A bustling city area.")
        Warehouse = Area("Warehouse", "An abandoned warehouse with construction containers lining the walls, stacked up to the ceiling, run by the Bloodhounds.")
        Backroads = Area("Backroads", "A foggy, long stretch of road leads to the unknown.")
        JacksFuel = Area("Jack's Fuel Station", "On the side of the road, a small fuel station with a sign that reads 'Jack's Fuel'.")
        Farm = Area("The Farm", "A seemingly abandoned farm taken over by the Bloodhounds.")

        # Connect areas
        Home.add_exit("north", Downtown)
        Home.add_exit("east", Warehouse)
        Downtown.add_exit("south", Home)
        Downtown.add_exit("east", Warehouse)
        Warehouse.add_exit("west", Downtown)
        Warehouse.add_exit("north", Backroads)
        Backroads.add_exit("North", Farm)
        Backroads.add_exit("west", JacksFuel)

        # Add areas to the dictionary
        self.areas['Home'] = Home
        self.areas['Downtown'] = Downtown
        self.areas['Warehouse'] = Warehouse
        self.areas['Backroads'] = Backroads
        self.areas['JacksFuel'] = JacksFuel
        self.areas['Farm'] = Farm

        # Add items to areas
        self.add_item_to_area('Home', 'Shovel')
        self.add_item_to_area('Downtown', 'Knife')
        self.add_item_to_area('Warehouse', 'USB stick')
        self.add_item_to_area('Warehouse', 'Note')
        self.add_item_to_area('Backroads', 'Carrot Seed')


        self.add_npc_to_area('JacksFuel', 'Jack')
        

    def game_loop(self):
        print("Welcome to the Text Adventure Game!")
        print("Type 'help' for a list of commands.\n")
        while self.is_running:
            
            print(f"\nCurrent location: {self.player.current_area.name}")
            command_input = input("> ").strip()
            if not command_input:
                continue
            parts = command_input.split()
            command = parts[0].lower()
            args = parts[1:]
            cmd_entry = self.commands.get(command)
            if cmd_entry:
                output = cmd_entry['handler'](args)
                if output:
                    print(output)
            else:
                print("Unknown command. Type 'help' for a list of commands.")

    def cmd_move(self, args):
        if not args:
            return "Move where? Specify a direction."
        direction = args[0].lower()
        return self.player.move(direction)

    def cmd_teleport(self, args):
        if not args:
            return "Teleport where? Specify an area name."
        area_name = " ".join(args)
        area = self.areas.get(area_name)
        if area:
            return self.player.teleport(area)
        else:
            return f"No such area: {area_name}"

    def cmd_look(self, args):
        return self.player.current_area.describe()

    def cmd_inventory(self, args):
        if self.player.inventory:
            return "You have:\n" + "\n".join(f" - {item}" for item in self.player.inventory)
        else:
            return "Your inventory is empty."

    def cmd_pick_up(self, args):
        if not args:
            return "pick up what? Specify an item name."
            
        # Check if this is a "take from storage" command
        if "from" in args:
            return self.cmd_take_from(args)
            
        item_name = " ".join(args)
        # Find item in current area by name
        for item in self.player.current_area.items:
            if item.name.lower() == item_name.lower():
                return self.player.pick_up(item)
        return f"No such item here: {item_name}"

    def cmd_drop(self, args):
        if not args:
            return "Drop what? Specify an item name."
        item_name = " ".join(args)
        # Find item in inventory by name
        for item in self.player.inventory:
            if item.name.lower() == item_name.lower():
                return self.player.drop(item)
        return f"You don't have that item: {item_name}"

    def cmd_quit(self, args):
        self.is_running = False
        return "Thanks for playing! Goodbye."

    def cmd_exit(self, args):
        """List exits for current area or specified area."""
        if not args:
            area = self.player.current_area
        else:
            area_name = " ".join(args)
            area = self.areas.get(area_name)
            if not area:
                return f"No such area: {area_name}"
        exits = area.exits
        if not exits:
            return f"{area.name} has no exits."
        exit_list = ", ".join(f"{direction} -> {dest.name}" for direction, dest in exits.items())
        return f"Exits for {area.name}: {exit_list}"

    def cmd_help(self, args):
        if args:
            # Detailed help for a specific command
            cmd = args[0].lower()
            if cmd in self.commands:
                handler = self.commands[cmd]['handler']
                doc = handler.__doc__ or "No documentation available."
                return f"Help for '{cmd}':\n{doc}"
            else:
                return f"Unknown command: {cmd}"
        
        # General help listing all commands by category
        categories = {}
        for cmd, info in self.commands.items():
            cat = info['category']
            categories.setdefault(cat, []).append(cmd)
        
        help_msg = "Available commands:\n"
        for cat in sorted(categories.keys()):
            cmds = ", ".join(sorted(categories[cat]))
            help_msg += f"  {cat.capitalize()}: {cmds}\n"
        
        # Add special section for storage commands
        help_msg += "\nStorage-related commands:\n"
        help_msg += "  open [storage] - Open a storage object\n"
        help_msg += "  close [storage] - Close a storage object\n"
        help_msg += "  look in [storage] - View items in an open storage\n"
        help_msg += "  take [item] from [storage] - Take an item from storage\n"
        help_msg += "  put [item] in [storage] - Put an item into storage\n"
        
        # Add smartphone commands section
        help_msg += "\nSmartphone commands:\n"
        help_msg += "  use phone - View available apps on your smartphone\n"
        help_msg += "  use phone garden - Open the Garden Manager app\n"
        help_msg += "  app [option] - Execute an option in the currently open app (e.g., app status, app instagrow)\n"
        
        help_msg += "\nType 'help [command]' for more details on a specific command."
        return help_msg
    
    def cmd_plant(self, args):
        """Plant a seed in soil. Usage: plant [seed name] in [soil name]"""
        if not args:
            return "Plant what? Usage: plant [seed name] in [soil name]"
        
        # Check if the command includes "in" to specify the soil
        if "in" in args:
            in_index = args.index("in")
            seed_name = " ".join(args[:in_index])
            soil_name = " ".join(args[in_index+1:])
        else:
            seed_name = " ".join(args)
            soil_name = None  # Will try to find any soil in the area
        
        # Find seed in inventory
        seed = None
        for item in self.player.inventory:
            if item.name.lower() == seed_name.lower() and isinstance(item, Seed):
                seed = item
                break
        
        if not seed:
            return f"You don't have a seed called '{seed_name}' in your inventory."
        
        # Find soil in the current area
        soil = None
        if soil_name:
            # Look for specific soil
            for obj in self.player.current_area.objects:
                if isinstance(obj, Soil) and obj.name.lower() == soil_name.lower():
                    soil = obj
                    break
            if not soil:
                return f"There is no soil called '{soil_name}' in this area."
        else:
            # Look for any soil
            for obj in self.player.current_area.objects:
                if isinstance(obj, Soil):
                    soil = obj
                    break
            if not soil:
                return "There is no soil in this area to plant seeds in."
        
        # Plant the seed in the soil
        success, message = soil.add_plant(seed)
        if success:
            self.player.inventory.remove(seed)
            return message
        else:
            return message
        
    def cmd_harvest(self, args):
        """Harvest a plant from soil. Usage: harvest [plant name] from [soil name]"""
        if not args:
            return "Harvest what? Usage: harvest [plant name] from [soil name]"
        
        # Check if the command includes "from" to specify the soil
        if "from" in args:
            from_index = args.index("from")
            plant_name = " ".join(args[:from_index])
            soil_name = " ".join(args[from_index+1:])
        else:
            plant_name = " ".join(args)
            soil_name = None  # Will try to find the plant in any soil
        
        # Find soil and plant
        for obj in self.player.current_area.objects:
            if isinstance(obj, Soil):
                if soil_name and obj.name.lower() != soil_name.lower():
                    continue  # Skip this soil if we're looking for a specific one
                
                plant = obj.get_plant(plant_name)
                if plant:
                    if plant.is_harvestable():
                        # Create a harvested item based on the plant type
                        harvested_item = Item(
                            f"{plant.crop_type}", 
                            f"A freshly harvested {plant.crop_type}.", 
                            plant.value
                        )
                        
                        # Add to inventory and remove from soil
                        self.player.inventory.append(harvested_item)
                        obj.remove_plant(plant)
                        
                        return f"You harvested a {plant.crop_type} from the {obj.name}."
                    else:
                        return f"The {plant.name} is not ready to harvest yet."
        
        if soil_name:
            return f"Could not find a plant called '{plant_name}' in the '{soil_name}'."
        else:
            return f"Could not find a plant called '{plant_name}' in any soil in this area."



    def cmd_open(self, args):
        # Open a storage object. Usage: open [storage name]
        if not args:
            return "Open what? Specify a storage object name."
        
        storage_name = " ".join(args)
        
        # Find storage object in current area
        for obj in self.player.current_area.objects:
            if isinstance(obj, Storage) and obj.name.lower() == storage_name.lower():
                success, message = obj.open()
                return message
        
        return f"There is no storage named '{storage_name}' here."
    
    def cmd_close(self, args):
        # Close a storage object. Usage: close [storage name]
        if not args:
            return "Close what? Specify a storage object name."
        
        storage_name = " ".join(args)
        
        # Find storage object in current area
        for obj in self.player.current_area.objects:
            if isinstance(obj, Storage) and obj.name.lower() == storage_name.lower():
                success, message = obj.close()
                return message
        
        return f"There is no storage named '{storage_name}' here."
    
    def cmd_take_from(self, args):
        # Take an item from a storage object. Usage: take [item name] from [storage name]
        if not args or "from" not in args:
            return "Usage: take [item name] from [storage name]"
        
        from_index = args.index("from")
        item_name = " ".join(args[:from_index])
        storage_name = " ".join(args[from_index+1:])
        
        # Find storage object in current area
        for obj in self.player.current_area.objects:
            if isinstance(obj, Storage) and obj.name.lower() == storage_name.lower():
                if not obj.is_open:
                    return f"The {obj.name} is closed. You need to open it first."
                
                success, item = obj.remove_item(item_name)
                if success:
                    self.player.inventory.append(item)
                    return f"You take the {item.name} from the {obj.name}."
                else:
                    return f"There is no {item_name} in the {obj.name}."
        
        return f"There is no storage named '{storage_name}' here."
    
    def cmd_put_in(self, args):
        # Put an item into a storage object. Usage: put [item name] in [storage name]
        if not args or "in" not in args:
            return "Usage: put [item name] in [storage name]"
        
        in_index = args.index("in")
        item_name = " ".join(args[:in_index])
        storage_name = " ".join(args[in_index+1:])
        
        # Find item in player's inventory
        item = None
        for inv_item in self.player.inventory:
            if inv_item.name.lower() == item_name.lower():
                item = inv_item
                break
        
        if not item:
            return f"You don't have a {item_name} in your inventory."
        
        # Find storage object in current area
        for obj in self.player.current_area.objects:
            if isinstance(obj, Storage) and obj.name.lower() == storage_name.lower():
                if not obj.is_open:
                    return f"The {obj.name} is closed. You need to open it first."
                
                self.player.inventory.remove(item)
                success, message = obj.add_item(item)
                return message
        
        return f"There is no storage named '{storage_name}' here."
    
    def cmd_look_in(self, args):
        # Look inside a storage object. Usage: look in [storage name]
        if not args or "in" not in args:
            return "Usage: look in [storage name]"
        
        in_index = args.index("in")
        storage_name = " ".join(args[in_index+1:])
        
        # Find storage object in current area
        for obj in self.player.current_area.objects:
            if isinstance(obj, Storage) and obj.name.lower() == storage_name.lower():
                if not obj.is_open:
                    return f"The {obj.name} is closed. You need to open it first."
                
                return obj.list_items()
        
            return f"There is no storage named '{storage_name}' here."
        
        
            
    def cmd_water(self, args):
        """Water plants in soil. Usage: water [plant name] in [soil name]"""
        # Parse arguments
        plant_name = None
        soil_name = None
        
        if not args:
            # Water all plants in any soil
            pass
        elif "in" in args:
            # Format: water [plant name] in [soil name]
            in_index = args.index("in")
            if in_index > 0:
                plant_name = " ".join(args[:in_index])
            soil_name = " ".join(args[in_index+1:])
        else:
            # Format could be just a soil name or just a plant name
            arg_str = " ".join(args)
            
            # Check if it's a soil name first
            soil_found = False
            for obj in self.player.current_area.objects:
                if isinstance(obj, Soil) and obj.name.lower() == arg_str.lower():
                    soil_name = arg_str
                    soil_found = True
                    break
            
            # If not a soil, assume it's a plant name
            if not soil_found:
                plant_name = arg_str
        
        # Find soil(s) to water
        watered_something = False
        messages = []
        
        for obj in self.player.current_area.objects:
            if isinstance(obj, Soil):
                if soil_name and obj.name.lower() != soil_name.lower():
                    continue  # Skip this soil if we're looking for a specific one
                
                success, message = obj.water_plants(plant_name)
                if success:
                    watered_something = True
                    messages.append(message)
        
        if watered_something:
            return "\n".join(messages)
        elif soil_name:
            return f"Could not find a soil called '{soil_name}' in this area."
        elif plant_name:
            return f"Could not find a plant called '{plant_name}' in any soil in this area."
        else:
            return "There are no plants to water in this area."
    
    def cmd_use(self, args):
        """Use an item from your inventory. Usage: use [item name]"""
        if not args:
            return "Use what? Specify an item name."
        
        item_name = args[0].lower()
        
        # Special case for smartphone
        if item_name == "phone" or item_name == "smartphone":
            # Find smartphone in inventory
            for item in self.player.inventory:
                if isinstance(item, Smartphone):
                    # If additional args are provided, try to open that app
                    if len(args) > 1:
                        app_name = args[1].lower()
                        return item.open_app(app_name)
                    else:
                        # Just show the main menu
                        return item.use()
            return "You don't have a smartphone in your inventory."
        
        # Handle other usable items
        for item in self.player.inventory:
            if item.name.lower() == item_name:
                if hasattr(item, 'use') and callable(item.use):
                    return item.use()
                else:
                    return f"You can't use the {item.name} that way."
        
        return f"You don't have a {item_name} in your inventory."
    
    def cmd_app(self, args):
        """Execute an app function on your smartphone. Usage: app [option]"""
        if not args:
            return "Specify an app option to execute."
        
        option = args[0].lower()
        
        # Find smartphone in inventory
        for item in self.player.inventory:
            if isinstance(item, Smartphone):
                if not item.current_app:
                    return "No app is currently open. Use 'use phone [app_name]' first."
                return item.execute_app_option(option, self, self.player)
        
        return "You don't have a smartphone in your inventory."

if __name__ == '__main__':
    game = Game()
    game.game_loop()
